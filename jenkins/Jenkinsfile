MYSQL_PORT = 3306;
REDIS_PORT = 6379;
LISK_CORE_WS_PORT = 7887;

def checkOpenPort(nPort) {
	def result = sh script: "nc -z 127.0.0.1 ${nPort}", returnStatus: true
	return (result == 0)
}

def runServiceIfMissing(svcName, path, nPort, startCommand = 'make up', logsCommand= 'make logs') {
    if (checkOpenPort(nPort) == false) {
        echo "${svcName} is not running, starting a new instance on port ${nPort}"
        dir(path) { sh startCommand }
        if (checkOpenPort(nPort) == false) {
            dir(path) { sh logsCommand }
            currentBuild.result = 'FAILURE'
            throw new Exception("Failed to run ${svcName} instance")
        }
    }
}

def checkHttp(url) {
	def result = sh script: "curl -s -f -o /dev/null ${url}", returnStatus: true
	return (result == 0)
}

def waitForHttp(url) {
	waitUntil { script { return (checkHttp(url) == true) } }
}

def echoBanner(msg) {
	echo '----------------------------------------------------------------------'
	echo msg
	echo '----------------------------------------------------------------------'
}

pipeline {
	agent { node { label 'lisk-service' } }
	triggers {
		cron('0 23 * * *')
	}
	options {
		timeout(time: 45, unit: 'MINUTES')
	}
	environment {
		ENABLE_HTTP_API='http-version3,http-status'
		ENABLE_WS_API='rpc-v3,blockchain'
		LISK_APP_WS='ws://host.docker.internal:7887'
		ENABLE_TESTING_MODE='true'
    }
	stages {
        stage('Checkout Projects') {
            parallel {
                stage('Checkout SCM') {
                    steps {
                        script { echoBanner(STAGE_NAME) }
                        cleanWs()
                        dir('lisk-service') {
                            checkout scm
                        }
                    }
                }
                stage('Checkout Lisk core') {
                    steps {
                        script { echoBanner(STAGE_NAME) }
                        dir('lisk-core') {
                            checkout([$class: 'GitSCM', branches: [[name: '*/development']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/liskhq/lisk-core.git']]])
                        }
                    }
                }
            }
        }
		stage('Start Lisk service') {
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh '''
							cp -f docker/example.env .env
							echo LISK_APP_WS=ws://host.docker.internal:9001 >> .env
							make build
							make up
							'''
					}
				}
			}
		}
		stage('Start Lisk core') {
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh '''
							# lisk-core
							npm i -g lisk-core@4.0.0-rc.3
							npm i -g pm2
							pm2 kill
							pm2 flush
							rm -rf ~/.lisk/
							lisk-core blockchain:import jenkins/lisk-core/snapshots/blockchain.tar.gz
							LISK_CONFIG_FILE=$PWD/jenkins/lisk-core/config/config.json LISK_PORT=9000 LISK_API_PORT=9001 pm2 start jenkins/lisk-core/pm2.config.json
							tail ~/.pm2/logs/lisk-core-out.log
							tail ~/.pm2/logs/lisk-core-error.log
							'''
					}
					sleep(180)
					sh '''
						curl http://127.0.0.1:9901/api/v3/index/status
						curl http://127.0.0.1:9901/api/v3/blocks
					'''
				}
			}
		}
		stage('Start required services') {
			steps {
				dir('lisk-service') {
					script {
						runServiceIfMissing('MySQL', './jenkins/mysql', MYSQL_PORT)
						runServiceIfMissing('Redis', './jenkins/redis', REDIS_PORT)
					}
					sleep(180)
					sh '''
						curl http://127.0.0.1:9901/api/v3/index/status
						curl http://127.0.0.1:9901/api/v3/blocks
					'''
				}
			}	
		}
		stage('Run functional tests') {
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh 'make build-local'
						sh 'make logs'
						dir('./framework') { sh "yarn run test:functional" }
						dir('./services/blockchain-app-registry') { sh "yarn run test:functional" }
						dir('./services/blockchain-connector') { sh "yarn run test:functional" }
						dir('./services/blockchain-indexer') { sh "yarn run test:functional" }
						dir('./services/fee-estimator') { sh "yarn run test:functional" }
						dir('./services/market') { sh "yarn run test:functional" }
						dir('./services/transaction-statistics') { sh "yarn run test:functional" }
					}
				}
			}
		}
		stage ('Check linting') {
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh 'yarn run eslint'
					}
				}
			}
		}
		stage('Run integration tests') {
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						dir('./tests') { sh 'yarn run test:integration:APIv3:SDKv6' }
					}
				}
			}
		}
	}
	post {
		cleanup {
			script { 
				dir('lisk-service') {
					sh '''
						docker kill $(docker ps -q)
						docker rm $(docker ps -a -q)
						docker volume rm $(docker volume ls -q)
						docker system prune -a
						kill -9 $(lsof -t -i:9000)
						kill -9 $(lsof -t -i:9001)
					'''
				}
				cleanWs()
			}
		}
	}
}
// vim: filetype=groovy
