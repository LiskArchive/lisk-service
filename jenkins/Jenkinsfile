MYSQL_PORT = 3306
REDIS_PORT = 6379
LISK_CORE_WS_PORT = 7887;

def checkOpenPort(nPort) {
	def result = sh script: "nc -z localhost ${nPort}", returnStatus: true
	return (result == 0)
}

def runServiceIfMissing(svcName, path, nPort) {
	if (checkOpenPort(nPort) == false) {
		echo "${svcName} is not running, starting a new instance on port ${nPort}"
		dir(path) { sh 'make up' }
		if (checkOpenPort(nPort) == false) {
			dir(path) { sh 'make logs' }
			currentBuild.result = 'FAILURE'
			throw new Exception("Failed to run ${svcName} instance")
		}
	}
}

def checkHttp(url) {
	def result = sh script: "curl -s -f -o /dev/null ${url}", returnStatus: true
	return (result == 0)
}

def waitForHttp(url) {
	waitUntil { script { return (checkHttp(url) == true) } }
}

def echoBanner(msg) {
	echo '----------------------------------------------------------------------'
	echo msg
	echo '----------------------------------------------------------------------'
}

pipeline {
	agent { node { label 'lisk-service' } }
	options {
		timeout(time: 10, unit: 'MINUTES')
	}
	environment {
		ENABLE_HTTP_API='http-version3,http-status'
		ENABLE_WS_API='rpc-v3,blockchain'
		LISK_APP_WS='ws://host.docker.internal:7887'
    }
	stages {
		stage('Checkout SCM') {
			steps {
				script { echoBanner(STAGE_NAME) }
				cleanWs()
				dir('lisk-service') {
					checkout scm
				}
			}
		}
		stage ('Build dependencies') {
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh 'npm i -g pm2'
						dir('./') { sh 'npm ci' }
						dir('./framework') { sh 'npm ci' }
						dir('./services/blockchain-app-registry') { sh 'npm ci' }
						dir('./services/blockchain-connector') { sh 'npm ci' }
						dir('./services/blockchain-indexer') { sh 'npm ci' }
						dir('./services/blockchain-coordinator') { sh 'npm ci' }
						dir('./services/fee-estimator') { sh 'npm ci' }
						dir('./services/market') { sh 'npm ci' }
						dir('./services/export') { sh 'npm ci' }
						dir('./services/gateway') { sh 'npm ci' }
						dir('./services/template') { sh 'npm ci' }
						dir('./services/transaction-statistics') { sh 'npm ci' }
						dir('./tests') { sh 'npm ci' }
					}
				}
			}
		}
		stage('Run required services') {
			steps {
				dir('lisk-service') {
					script {
						runServiceIfMissing('Lisk Core', './jenkins/lisk-core', LISK_CORE_WS_PORT)
					}
				}
			}	
		}
		stage('Run microservices') {
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					ansiColor('xterm') {
						dir('./') { 
							sh '''
							make build
							ENABLE_HTTP_API=${ENABLE_HTTP_API} ENABLE_WS_API=${ENABLE_WS_API} LISK_APP_WS=${LISK_APP_WS} make up
							'''
						}
					}
					sleep(120)
					waitForHttp('http://localhost:9901/api/ready')
				}
			}
		}
		stage('Run Tests') {
			parallel {
				stage ('Check linting') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								sh 'npm run eslint'
							}
						}
					}
				}
				stage('Run functional tests') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								// dir('./framework') { sh "npm run test:functional" }
								dir('./services/blockchain-app-registry') { sh "npm run test:functional" }
								dir('./services/blockchain-connector') { sh "npm run test:functional" }
								dir('./services/blockchain-indexer') { sh "npm run test:functional" }
								dir('./services/fee-estimator') { sh "npm run test:functional" }
								dir('./services/market') { sh "npm run test:functional" }
								dir('./services/transaction-statistics') { sh "npm run test:functional" }
								// dir('./tests') { sh "npm run test:functional" }
							}
						}
					}
				}
				stage('Run integration tests') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								dir('./tests') { sh 'npm run test:integration:APIv3:SDKv6' }
							}
						}
					}
				}
			}
		}
	}
	post {
		failure {
			emailext(
				to: 'service-dev@lisk.com',
				subject: "[JENKINS] ${currentBuild.fullDisplayName} - ${currentBuild.result}",
				body: """
					Hello Team,<br><br>
					
					Build <b>${currentBuild.fullDisplayName}</b> for <b>Lisk Service</b> needs your attention. Please find all the necessary details below:
					
					<p>
						<ul>
							<li>Job <b>${currentBuild.fullDisplayName}</b> finished with result - <b>${currentBuild.result}</b></li>
							<li>Total time taken: ${currentBuild.durationString}</li>
							<li>The job logs are available at: <a href='${currentBuild.absoluteUrl}'>${currentBuild.fullDisplayName}</a></li>
						</ul>
					</p>

					- Lisk Service Team!
				""",
				mimeType: 'text/html'
			)
			script { 
				echoBanner('Failed to run the pipeline') 
			}
			dir('lisk-service') {
				nvm(readFile('.nvmrc').trim()) {
					sh 'pm2 logs'	
				}
			}
		}
		cleanup {
			script { 
				echoBanner('Cleaning up...')
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						echoBanner('Stopping all microservices and removing dependencies')
						sh '''
							pm2 stop --silent ecosystem.jenkins.config.js
							make clean-local
						'''
						echoBanner('Stopping MySQL')
						dir('./jenkins/mysql') { sh "make down" }
						echoBanner('Stopping Redis')
						dir('./jenkins/redis') { sh "make down" }
					}
				}
				dir('lisk-core') {
					echoBanner('Stopping Lisk Core')
					sh '''
						kill $( cat lisk-core.pid ) || true
						rm -rf ~/.lisk node_modules
					'''
				}
			}
		}
	}
}
// vim: filetype=groovy
