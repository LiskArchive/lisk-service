MYSQL_PORT = 3306;
REDIS_PORT = 6381;
LISK_CORE_WS_PORT = 7887;
SERVICE_BROKER_PORT = 4222;

def checkOpenPort(nPort) {
	def result = sh script: "nc -z 127.0.0.1 ${nPort}", returnStatus: true
	return (result == 0)
}

def runServiceIfMissing(svcName, path, nPort, startCommand = 'make up', logsCommand= 'make logs') {
    if (checkOpenPort(nPort) == false) {
        echo "${svcName} is not running, starting a new instance on port ${nPort}"
        dir(path) { sh startCommand }
        if (checkOpenPort(nPort) == false) {
            dir(path) { sh logsCommand }
            currentBuild.result = 'FAILURE'
            throw new Exception("Failed to run ${svcName} instance")
        }
    }
}

def checkHttp(url) {
	def result = sh script: "curl -s -f -o /dev/null ${url}", returnStatus: true
	return (result == 0)
}

def waitForHttp(url) {
	waitUntil { script { return (checkHttp(url) == true) } }
}

def echoBanner(msg) {
	echo '----------------------------------------------------------------------'
	echo msg
	echo '----------------------------------------------------------------------'
}

pipeline {
	agent { node { label 'lisk-service' } }
	triggers {
		cron('0 23 * * *')
	}
	options {
		timeout(time: 45, unit: 'MINUTES')
	}
	environment {
		ENABLE_HTTP_API='http-status,http-version3,http-exports'
		ENABLE_WS_API='rpc-v3,rpc-test,blockchain'
		LISK_APP_WS='ws://host.docker.internal:7887'
		ENABLE_TESTING_MODE='true'
    }
	stages {
        stage('Checkout SCM') {
			when {
				anyOf {
					branch 'development'
					branch 'release/**'
					branch 'feature/**'
				}
			}
			steps {
				script { echoBanner(STAGE_NAME) }
				cleanWs()
				dir('lisk-service') {
					checkout scm
				}
			}
		}
		stage('Start Lisk Service') {
			when {
				anyOf {
					branch 'development'
					branch 'release/**'
					branch 'feature/**'
				}
			}
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh '''
							make build
							docker-compose -f jenkins/docker-compose.nightly.yml down --volumes --remove-orphans
							docker-compose -f jenkins/docker-compose.nightly.yml --env-file .env up -d
						'''
					}
				}
			}
		}
		stage('Start Lisk Core') {
			when {
				anyOf {
					branch 'development'
					branch 'release/**'
					branch 'feature/**'
				}
			}
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh '''
							# lisk-core
							npm i -g lisk-core@^4.0.0-rc.6
							npm i -g pm2
							pm2 stop jenkins/lisk-core/pm2.config.json
							pm2 delete jenkins/lisk-core/pm2.config.json
							pm2 flush
							rm -rf ~/.lisk/
							lisk-core blockchain:import jenkins/lisk-core/snapshots/blockchain.tar.gz
							LISK_CONFIG_FILE=$PWD/jenkins/lisk-core/config/config.json pm2 start jenkins/lisk-core/pm2.config.json
						'''
					}
					sleep(5)
				}
			}
		}
		stage('Start external services') {
			when {
				anyOf {
					branch 'development'
					branch 'release/**'
					branch 'feature/**'
				}
			}
			steps {
				dir('lisk-service') {
					script {
						runServiceIfMissing('MySQL', './jenkins/mysql', MYSQL_PORT)
						runServiceIfMissing('Redis', './jenkins/redis', REDIS_PORT)
					}
					sleep(5)
				}
			}	
		}
		stage('Wait till indexing is complete') {
			when {
				anyOf {
					branch 'development'
					branch 'release/**'
					branch 'feature/**'
				}
			}
			steps {
				script {
					def apiUrl = 'http://127.0.0.1:9901/api/v3/index/status'
					def percentageIndexed = "0"
					while (percentageIndexed != "100") {
						def response = sh(script: "curl -s $apiUrl", returnStatus: true, returnStdout: true)
						if (response == 0) {
							def jsonString = sh(script: "curl -s $apiUrl | jq -r '.data.percentageIndexed'", returnStdout: true).trim()
                    		percentageIndexed = jsonString
						}
						else {
							sh '''
								echo "Failed to fetch status"
							'''
						}
						sleep(30)
					}
				}
			}
		}
		stage('Run tests') {
			when {
				anyOf {
					branch 'development'
					branch 'release/**'
					branch 'feature/**'
				}
			}
			parallel {
				stage ('Check linting') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								sh 'yarn lint'
							}
						}
					}
				}
				stage('Run functional tests') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								dir('./services/blockchain-app-registry') { sh "npm run test:functional" }
								dir('./services/blockchain-indexer') { 
									sh "SERVICE_BROKER='nats://127.0.0.1:${SERVICE_BROKER_PORT}' SERVICE_INDEXER_CACHE_REDIS='redis://lisk:password@127.0.0.1:${REDIS_PORT}/2' SERVICE_INDEXER_REDIS_VOLATILE='redis://lisk:password@127.0.0.1:${REDIS_PORT}/3' SERVICE_MESSAGE_QUEUE_REDIS='redis://lisk:password@127.0.0.1:${REDIS_PORT}/4' npm run test:functional"
								}
								dir('./services/fee-estimator') { sh "npm run test:functional" }
								dir('./services/market') { 
									sh "SERVICE_BROKER='nats://127.0.0.1:${SERVICE_BROKER_PORT}' SERVICE_MARKET_REDIS='redis://lisk:password@127.0.0.1:${REDIS_PORT}/10' npm run test:functional"
								}
								dir('./services/transaction-statistics') { sh "SERVICE_BROKER='nats://127.0.0.1:${SERVICE_BROKER_PORT}' npm run test:functional" }
								dir('./framework') { sh "REDIS_URL='redis://lisk:password@127.0.0.1:${REDIS_PORT}/0' npm run test:functional" }
								dir('./services/blockchain-connector') { sh "SERVICE_BROKER='nats://127.0.0.1:${SERVICE_BROKER_PORT}' npm run test:functional" }
							}
						}
					}
				}
				stage('Run integration tests') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								dir('./tests') { sh "node runIntegrationTestsWithRetry.js" }
							}
						}
					}
				}
			}
		}
	}
	post {
		failure {
			emailext(
				to: 'service-dev@lisk.com',
				subject: "[JENKINS] ${currentBuild.fullDisplayName} - ${currentBuild.result}",
				body: """
					Hello Team,<br><br>
					
					Build <b>${currentBuild.fullDisplayName}</b> for <b>Lisk Service</b> needs your attention. Please find all the necessary details below:
					
					<p>
						<ul>
							<li>Job <b>${currentBuild.fullDisplayName}</b> finished with result - <b>${currentBuild.result}</b></li>
							<li>Total time taken: ${currentBuild.durationString}</li>
							<li>The job logs are available at: <a href='${currentBuild.absoluteUrl}'>${currentBuild.fullDisplayName}</a></li>
						</ul>
					</p>

					- Lisk Service Team!
				""",
				mimeType: 'text/html'
			)
			script { 
				echoBanner('Failed to run the pipeline') 
			}
		}
		cleanup {
			script { 
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh '''
							docker-compose -f jenkins/docker-compose.nightly.yml down --volumes --remove-orphans
							pm2 stop jenkins/lisk-core/pm2.config.json
							pm2 delete jenkins/lisk-core/pm2.config.json
							pm2 flush
							make clean
						'''
						dir('./jenkins/mysql') { sh "make down" }
						dir('./jenkins/redis') { sh "make down" }
					}
				}
				cleanWs()
			}
		}
	}
}
// vim: filetype=groovy
