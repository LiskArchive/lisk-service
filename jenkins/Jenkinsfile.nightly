MYSQL_PORT = 3306
REDIS_PORT = 6381

def checkOpenPort(nPort) {
	def result = sh script: "nc -z localhost ${nPort}", returnStatus: true
	return (result == 0)
}

def runServiceIfMissing(svcName, path, nPort) {
	if (checkOpenPort(nPort) == false) {
		echo "${svcName} is not running, starting a new instance on port ${nPort}"
		dir(path) { sh 'make up' }
		if (checkOpenPort(nPort) == false) {
			dir(path) { sh 'make logs' }
			currentBuild.result = 'FAILURE'
			throw new Exception("Failed to run ${svcName} instance")
		}
	}
}

def checkHttp(url) {
	def result = sh script: "curl -s -f -o /dev/null ${url}", returnStatus: true
	return (result == 0)
}

def waitForHttp(url) {
	waitUntil { script { return (checkHttp(url) == true) } }
}

def echoBanner(msg) {
	echo '----------------------------------------------------------------------'
	echo msg
	echo '----------------------------------------------------------------------'
}

properties([
	parameters([
		string(name: 'COMMITISH_CORE', description: 'Commit-ish of LiskHQ/lisk-core to use', defaultValue: 'release/4.0.0' ),
	])
])

pipeline {
	agent { node { label 'lisk-service' } }
	triggers {
		cron('0 23 * * *')
	}
	options {
		timeout(time: 10, unit: 'MINUTES')
	}
	stages {
		stage('Checkout SCM') {
			when {
				anyOf {
					branch 'development'
					branch 'feature/**'
				}
			}
			steps {
				script { echoBanner(STAGE_NAME) }
				cleanWs()
				dir('lisk-core') {
					checkout([$class: 'GitSCM', branches: [[name: "${params.COMMITISH_CORE}" ]], userRemoteConfigs: [[url: 'https://github.com/LiskHQ/lisk-core']]])
				}
				dir('lisk-service') {
					checkout scm
				}
			}
		}
		stage ('Build dependencies') {
			when {
				anyOf {
					branch 'development'
					branch 'feature/**'
				}
			}
			parallel {
				stage('Lisk Core') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-core') {
							nvm(readFile('.nvmrc').trim()) {
								sh '''
									rm -rf ~/.lisk
									npm ci
									npm run build
								'''
							}
						}
					}
				}
				stage('Lisk Service') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								sh 'npm i -g pm2'
								dir('./') { sh 'npm ci' }
								dir('./framework') { sh 'npm ci' }
								dir('./services/blockchain-app-registry') { sh 'npm ci' }
								dir('./services/blockchain-connector') { sh 'npm ci' }
								dir('./services/blockchain-indexer') { sh 'npm ci' }
								dir('./services/blockchain-coordinator') { sh 'npm ci' }
								dir('./services/fee-estimator') { sh 'npm ci' }
								dir('./services/market') { sh 'npm ci' }
								dir('./services/newsfeed') { sh 'npm ci' }
								dir('./services/export') { sh 'npm ci' }
								dir('./services/gateway') { sh 'npm ci' }
								dir('./services/template') { sh 'npm ci' }
								dir('./services/transaction-statistics') { sh 'npm ci' }
								dir('./tests') { sh 'npm ci' }
							}
						}
					}
				}
			}
		}
		stage('Run required services') {
			when {
				anyOf {
					branch 'development'
					branch 'feature/**'
				}
			}
			parallel {
				stage('Lisk Core') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-core') {
							nvm(readFile('.nvmrc').trim()) {
								sh '''
									./bin/run blockchain:import --force lisk-core/snapshots/blockchain.tar.gz
									./bin/run start --network devnet --api-ipc &
									echo $! > lisk-core.pid
								'''
							}
						}
					}
				}
				stage('Lisk Service') {
					steps {
						dir('lisk-service') {
							script {
								runServiceIfMissing('MySQL', './jenkins/mysql', MYSQL_PORT)
								runServiceIfMissing('Redis', './jenkins/redis', REDIS_PORT)
							}
						}
					}	
				}
			}
		}
		stage('Run microservices') {
			when {
				anyOf {
					branch 'development'
					branch 'feature/**'
				}
			}
			steps {
				script { echoBanner(STAGE_NAME) }
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						sh 'pm2 start --silent ecosystem.jenkins.config.js' 
					}
					sleep(90)
					waitForHttp('http://localhost:9901/api/ready')
				}
			}
		}
		stage('Run Tests') {
			when {
				anyOf {
					branch 'development'
					branch 'feature/**'
				}
			}
			parallel {
				stage ('Check linting') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								sh 'npm run eslint'
							}
						}
					}
				}
				stage('Run functional tests') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								dir('./framework') { sh "npm run test:functional" }
								dir('./services/blockchain-connector') { sh "npm run test:functional" }
								dir('./services/market') { sh "npm run test:functional" }
								// dir('./tests') { sh "npm run test:functional" }
							}
						}
					}
				}
				stage('Run integration tests') {
					steps {
						script { echoBanner(STAGE_NAME) }
						dir('lisk-service') {
							nvm(readFile('.nvmrc').trim()) {
								dir('./tests') { sh 'npm run test:integration:APIv3:SDKv6' }
							}
						}
					}
				}
			}
		}
	}
	post {
		failure {
			emailext(
				to: 'service-dev@lisk.com',
				subject: "[JENKINS] ${currentBuild.fullDisplayName} - ${currentBuild.result}",
				body: """
					Hello Team,<br><br>
					
					Build <b>${currentBuild.fullDisplayName}</b> for <b>Lisk Service</b> needs your attention. Please find all the necessary details below:
					
					<p>
						<ul>
							<li>Job <b>${currentBuild.fullDisplayName}</b> finished with result - <b>${currentBuild.result}</b></li>
							<li>Total time taken: ${currentBuild.durationString}</li>
							<li>The job logs are available at: <a href='${currentBuild.absoluteUrl}'>${currentBuild.fullDisplayName}</a></li>
						</ul>
					</p>

					- Lisk Service Team!
				""",
				mimeType: 'text/html'
			)
			script { 
				echoBanner('Failed to run the pipeline') 
			}
			dir('lisk-service') {
				nvm(readFile('.nvmrc').trim()) {
					sh 'pm2 logs'	
				}
			}
		}
		cleanup {
			script { 
				echoBanner('Cleaning up...')
				dir('lisk-service') {
					nvm(readFile('.nvmrc').trim()) {
						echoBanner('Stopping all microservices and removing dependencies')
						sh '''
							pm2 stop --silent ecosystem.jenkins.config.js
							make clean-local
						'''
						echoBanner('Stopping MySQL')
						dir('./jenkins/mysql') { sh "make down" }
						echoBanner('Stopping Redis')
						dir('./jenkins/redis') { sh "make down" }
					}
				}
				dir('lisk-core') {
					echoBanner('Stopping Lisk Core')
					sh '''
						kill $( cat lisk-core.pid ) || true
						rm -rf ~/.lisk node_modules
					'''
				}
			}
		}
	}
}
// vim: filetype=groovy
